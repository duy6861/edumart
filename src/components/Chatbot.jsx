// src/components/Chatbot.jsx
import React, { useState, useEffect, useRef } from 'react';
import { Link } from 'react-router-dom';
import { useSelector } from 'react-redux';
import { keywordGroups, removeVietnameseTones } from '../data/keywords';

export default function Chatbot() {
  const [isOpen, setIsOpen] = useState(false);
  const [message, setMessage] = useState('');
  const [chatHistory, setChatHistory] = useState([]);
  const [loadingReply, setLoadingReply] = useState(false);
  const chatContainerRef = useRef(null);
  const lastMessageRef = useRef(null);
  const { products, loading, error } = useSelector((state) => state.products);

  // L·ªùi ch√†o m·∫∑c ƒë·ªãnh
  const initialGreeting = "Ch√†o b·∫°n! M√¨nh l√† tr·ª£ l√Ω AI c·ªßa Antoree. B·∫°n c·∫ßn h·ªçc ti·∫øng Anh v·ªÅ ch·ªß ƒë·ªÅ g√¨? M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n t√¨m kh√≥a h·ªçc ph√π h·ª£p! üòä";
  useEffect(() => {
    if (lastMessageRef.current) {
      lastMessageRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }, [chatHistory]);
  const toggleChat = () => setIsOpen(!isOpen);

  const handleInputChange = (e) => setMessage(e.target.value);

  const handleSubmit = (e) => {
    e?.preventDefault();
    if (!message.trim()) return;

    const userMessage = message.trim();
    const newMessage = { type: 'user', text: userMessage };
    setChatHistory((prev) => [...prev, newMessage]);
    setMessage('');
    setLoadingReply(true);

    // X·ª≠ l√Ω ph·∫£n h·ªìi AI sau 1 gi√¢y
    setTimeout(() => {
      const response = getAIResponse(userMessage);
      setChatHistory((prev) => [...prev, response]);
      setLoadingReply(false);
    }, 2000);
  };
  /**
  * H√†m x·ª≠ l√Ω v√† t·∫°o ph·∫£n h·ªìi cho ng∆∞·ªùi d√πng d·ª±a tr√™n tin nh·∫Øn h·ªç nh·∫≠p v√†o.
  * 
  * @param {string} input - Tin nh·∫Øn ng∆∞·ªùi d√πng g·ª≠i ƒë·∫øn chatbot (v√≠ d·ª•: "t√¥i mu·ªën h·ªçc ph√°t √¢m")
  * @returns {Object} - M·ªôt ƒë·ªëi t∆∞·ª£ng ch·ª©a: lo·∫°i tin nh·∫Øn, n·ªôi dung ph·∫£n h·ªìi v√† danh s√°ch s·∫£n ph·∫©m g·ª£i √Ω (n·∫øu c√≥)
  */
  const getAIResponse = (input) => {
    // B∆∞·ªõc 1: Chu·∫©n h√≥a ƒë·∫ßu v√†o
    // - Chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng ƒë·ªÉ kh√¥ng ph√¢n bi·ªát hoa/th∆∞·ªùng
    // - Lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát (v√≠ d·ª•: "y t·∫ø" ‚Üí "y te") ƒë·ªÉ tƒÉng kh·∫£ nƒÉng so kh·ªõp
    const normalizedInput = removeVietnameseTones(input.toLowerCase());

    // B∆∞·ªõc 2: Duy·ªát qua t·ª´ng nh√≥m t·ª´ kh√≥a ƒë√£ ƒë·ªãnh nghƒ©a trong keywords.js
    for (let group of keywordGroups) {
      // Ki·ªÉm tra xem tin nh·∫Øn ƒë√£ chu·∫©n h√≥a c√≥ ch·ª©a t·ª´ kh√≥a n√†o trong nh√≥m n√†y kh√¥ng
      // V√≠ d·ª•: n·∫øu ng∆∞·ªùi d√πng nh·∫≠p "h·ªçc ph√°t √¢m", th√¨ s·∫Ω kh·ªõp v·ªõi nh√≥m c√≥ regex /ph√°t √¢m|pronunciation|.../
      if (group.keywords.test(normalizedInput)) {

        // N·∫øu c√≥ kh·ªõp, t√¨m c√°c s·∫£n ph·∫©m li√™n quan trong danh s√°ch hi·ªán t·∫°i
        // group.productIds: danh s√°ch ID kh√≥a h·ªçc li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ n√†y
        // parseInt(p.id): ƒë·∫£m b·∫£o ID s·∫£n ph·∫©m l√† s·ªë nguy√™n ƒë·ªÉ so s√°nh ch√≠nh x√°c
        const matchedProducts = products.filter(p => group.productIds.includes(parseInt(p.id)));

        // Ch·ªçn ng·∫´u nhi√™n m·ªôt c√¢u tr·∫£ l·ªùi th√¢n thi·ªán t·ª´ danh s√°ch reply ƒë√£ ƒë·ªãnh nghƒ©a
        // Gi√∫p chatbot kh√¥ng tr·∫£ l·ªùi c·ª©ng nh·∫Øc, l·∫∑p ƒëi l·∫∑p l·∫°i
        const reply = group.replies[Math.floor(Math.random() * group.replies.length)];

        // T·∫°o ph·∫ßn b·ªï sung th√¥ng b√°o c√≥ bao nhi√™u kh√≥a h·ªçc ph√π h·ª£p
        // N·∫øu c√≥ s·∫£n ph·∫©m ph√π h·ª£p: th√™m "C√≥ 3 kh√≥a h·ªçc ph√π h·ª£p."
        // N·∫øu kh√¥ng c√≥: chu·ªói r·ªóng
        const productsText = matchedProducts.length > 0
          ? ` C√≥ ${matchedProducts.length} kh√≥a h·ªçc ph√π h·ª£p.`
          : '';

        // Tr·∫£ v·ªÅ ph·∫£n h·ªìi ho√†n ch·ªânh
        return {
          type: 'ai',           // X√°c ƒë·ªãnh ƒë√¢y l√† tin nh·∫Øn t·ª´ chatbot (AI)
          text: reply + productsText, // N·ªôi dung: c√¢u tr·∫£ l·ªùi + th√¥ng b√°o s·ªë l∆∞·ª£ng kh√≥a h·ªçc
          products: matchedProducts   // Danh s√°ch s·∫£n ph·∫©m g·ª£i √Ω ƒë·ªÉ hi·ªÉn th·ªã
        };
      }
    }

    // B∆∞·ªõc 3: N·∫øu KH√îNG C√ì nh√≥m t·ª´ kh√≥a n√†o kh·ªõp (kh√¥ng hi·ªÉu c√¢u h·ªèi)
    // Chu·∫©n b·ªã m·ªôt s·ªë ph·∫£n h·ªìi m·∫∑c ƒë·ªãnh th√¢n thi·ªán ƒë·ªÉ h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng
    const fallbackReplies = [
      "M√¨nh ch∆∞a hi·ªÉu r√µ y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n v·ªÅ ch·ªß ƒë·ªÅ b·∫°n mu·ªën h·ªçc kh√¥ng? V√≠ d·ª•: giao ti·∫øp, TOEIC, ph√°t √¢m,... üòä",
      "B·∫°n mu·ªën h·ªçc ti·∫øng Anh ƒë·ªÉ l√†m g√¨ ·∫°? M√¨nh c√≥ th·ªÉ g·ª£i √Ω kh√≥a h·ªçc n·∫øu b·∫°n n√≥i r√µ m·ª•c ti√™u nh√©!",
      "H√£y th·ª≠ nh·∫≠p: 'kh√≥a h·ªçc TOEIC', 'luy·ªán ph√°t √¢m', 'giao ti·∫øp h√†ng ng√†y' ƒë·ªÉ m√¨nh gi√∫p b·∫°n nhanh h∆°n nh√©!",
      "B·∫°n c√≥ mu·ªën h·ªçc k·ªπ nƒÉng nghe, n√≥i, ƒë·ªçc hay vi·∫øt tr∆∞·ªõc kh√¥ng? Nh·∫≠p th·ª≠ 'nghe', 'n√≥i' ƒë·ªÉ m√¨nh hi·ªÉu h∆°n.",
      "B·∫°n mu·ªën luy·ªán t·ª´ v·ª±ng, ph√°t √¢m hay giao ti·∫øp? G√µ t·ª´ kh√≥a ch·ªß ƒë·ªÅ b·∫°n quan t√¢m nh√©!",
      "N·∫øu b·∫°n ch∆∞a bi·∫øt n√™n h·ªçc c√°i g√¨, b·∫°n c√≥ th·ªÉ nh·∫≠p t·ª´ ‚Äúgiao ti·∫øp‚Äù, ‚ÄúIELTS‚Äù, ‚Äúph√°t √¢m‚Äù ƒë·ªÉ m√¨nh g·ª£i √Ω.",
      "B·∫°n mu·ªën h·ªçc ti·∫øng Anh theo ch·ªß ƒë·ªÅ n√†o? V√≠ d·ª•: du l·ªãch, c√¥ng vi·ªác, h·ªçc thu·∫≠t‚Ä¶",
      "B·∫°n ƒëang mu·ªën h·ªçc TOEIC, IELTS hay ti·∫øng Anh giao ti·∫øp? Nh·∫≠p t·ª´ kh√≥a ƒë√≥ ƒë·ªÉ m√¨nh bi·∫øt b·∫°n c·∫ßn g√¨ h∆°n.",
      "B·∫°n c√≥ th·ªÉ th·ª≠ n√≥i ch·ªß ƒë·ªÅ b·∫°n mu·ªën: ‚Äúgiao ti·∫øp‚Äù, ‚Äúph√°t √¢m chu·∫©n‚Äù, ‚Äúnghe ti·∫øng Anh‚Äù‚Ä¶ M√¨nh s·∫Ω ch·ªçn kh√≥a ph√π h·ª£p cho b·∫°n."
    ];

    // Ch·ªçn ng·∫´u nhi√™n m·ªôt ph·∫£n h·ªìi m·∫∑c ƒë·ªãnh ƒë·ªÉ tr√°nh l·∫∑p l·∫°i
    const randomFallback = fallbackReplies[Math.floor(Math.random() * fallbackReplies.length)];

    // Tr·∫£ v·ªÅ ph·∫£n h·ªìi m·∫∑c ƒë·ªãnh + danh s√°ch s·∫£n ph·∫©m r·ªóng
    return {
      type: 'ai',
      text: randomFallback,
      products: []
    };
  };
  return (
    <>
      {/* N√∫t m·ªü chatbot - c√≥ animation */}
      <button
        onClick={toggleChat}
        className="fixed bottom-6 right-6 bg-green-600 text-white rounded-full p-4 shadow-lg hover:bg-green-700 transition z-40 pulse-scale"
        aria-label="M·ªü chatbot"
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 012 2h-5l-5 5v-5H9z" />
        </svg>
      </button>

      {/* Giao di·ªán chatbot */}
      {isOpen && (
        <div className="fixed bottom-20 right-6 w-80 md:w-96 h-[32rem] flex flex-col bg-white shadow-xl rounded-t-lg overflow-hidden z-50 border border-gray-200">
          <div className="bg-green-600 text-white px-4 py-3 flex justify-between items-center">
            <span className="font-semibold">Chatbot Antoree</span>
            <button onClick={toggleChat} className="text-white hover:text-gray-200 focus:outline-none">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          <div ref={chatContainerRef} className="flex-grow overflow-y-auto p-4 bg-gray-100 space-y-3">
            {chatHistory.length === 0 ? (
              <div className="text-sm text-gray-500 italic">
                {initialGreeting}
              </div>
            ) : (
              chatHistory.map((msg, index) => {
                const isLast = index === chatHistory.length - 1;

                return (
                  <div
                    key={index}
                    ref={isLast ? lastMessageRef : null}
                    className={`p-3 rounded-md max-w-xs ${msg.type === 'user' ? 'ml-auto bg-green-100' : 'bg-white'} shadow-sm`}
                  >
                    <strong>{msg.type === 'user' ? 'B·∫°n' : 'Antoree'}:</strong>
                    <p className="mt-1">{msg.text}</p>

                    {msg.products && msg.products.length > 0 && (
                      <div className="mt-4 grid grid-cols-2 gap-3">
                        {msg.products.map((product) => (
                          <Link
                            to={`/product/${product.id}`}
                            key={product.id}
                            onClick={toggleChat}
                            className="block border rounded p-2 bg-white shadow hover:shadow-md transition"
                          >
                            <img
                              src={product.image}
                              alt={product.name}
                              className="w-full h-20 object-cover mb-2 rounded"
                            />
                            <h4 className="font-medium text-xs sm:text-sm line-clamp-2 h-10">
                              {product.name}
                            </h4>
                            <p className="text-green-600 font-bold text-xs mt-1">
                              {product.price.toLocaleString()} ƒë
                            </p>
                          </Link>
                        ))}
                      </div>
                    )}
                  </div>
                );
              })
            )}

            {loadingReply && (
              <div className="bg-white p-3 rounded-md shadow-sm">
                <strong>Antoree:</strong>
                <div className="flex items-center mt-2">
                  <div className="w-2 h-2 bg-green-600 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-green-600 rounded-full animate-bounce mx-1" style={{ animationDelay: '0.2s' }}></div>
                  <div className="w-2 h-2 bg-green-600 rounded-full animate-bounce" style={{ animationDelay: '0.4s' }}></div>
                </div>
              </div>
            )}

            {loading && (
              <p className="text-sm text-gray-400 italic">ƒêang t·∫£i s·∫£n ph·∫©m...</p>
            )}
            {error && (
              <p className="text-sm text-red-500 italic">L·ªói: {error}</p>
            )}
          </div>


          <form onSubmit={handleSubmit} className="p-3 bg-white border-t border-gray-200">
            <div className="flex items-center space-x-2">
              <input
                type="text"
                value={message}
                onChange={handleInputChange}
                placeholder="B·∫°n c·∫ßn h·ªçc g√¨?"
                className="flex-grow px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-green-500"
              />
              <button
                type="submit"
                className="bg-green-600 text-white p-2 rounded hover:bg-green-700 transition"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2z" />
                </svg>
              </button>
            </div>
          </form>
        </div>
      )}
    </>
  );
}